name: CI/CD for Opsta Line BOT

env:
  IMAGE_NAME: ghcr.io/opsta/opsta-linebot

on:
  push:
    paths-ignore:
      - 'README.md'
      - 'Makefile'
      - 'docker-compose.yml'
      - '.gitignore'
      - 'requirements-orig-*.txt'
      - '.devcontainer/**'
      - 'iac/**'
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
    branches:
      - "main"

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set DEPLOY_ENV for production
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo "DEPLOY_ENV=prd" >> "$GITHUB_ENV"
      - name: Set DEPLOY_ENV for non-production
        if: startsWith(github.ref, 'refs/tags/v') != true
        run: |
          if [[ ${{ github.ref_name }} == 'main' || ${{ github.ref_name }} == 'master' ]]; then
            echo "DEPLOY_ENV=dev" >> "$GITHUB_ENV"
          else
            echo "DEPLOY_ENV=${{ github.ref_name }}" >> "$GITHUB_ENV"
          fi
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: ${{ env.IMAGE_NAME }}
          # generate Docker tags based on the following events/attributes
          tags: |
            # branch event
            type=ref,event=branch
            # dynamically set the branch name as a prefix
            type=sha,prefix=${{ env.DEPLOY_ENV }}-,priority=650
            # push tag event on valid semver git tag
            type=semver,pattern={{raw}}
    # For use in other jobs
    outputs:
      tags: "${{ steps.meta.outputs.tags }}"
      labels: "${{ steps.meta.outputs.labels }}"
      version: "${{ steps.meta.outputs.version }}"
      deploy_env: "${{ env.DEPLOY_ENV }}"

  # For non-production environments
  build-push:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') != true
    needs:
      - setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Set up QEMU (optional)
      #   uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ needs.setup.outputs.tags }}
          labels: ${{ needs.setup.outputs.labels }}
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache

  # For production environment
  tag-prd:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - setup
    steps:
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Setup Crane
        uses: imjasonh/setup-crane@v0.4
      - name: Copy Docker Image from dev to production
        run: crane copy ${{ env.IMAGE_NAME }}:dev ${{ env.IMAGE_NAME }}:${{ needs.setup.outputs.version }}

  # Commit to Git for ArgoCD
  gitops-commit:
    runs-on: ubuntu-latest
    # run after all of needs are complete (whether skipped or success)
    if: ${{ !cancelled() && !failure() }}
    needs:
      - setup
      - build-push
      - tag-prd
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Update Image Version in Helm Value file
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: "iac/helm-values/opsta-line-bot-${{ needs.setup.outputs.deploy_env }}.yaml"
          propertyPath: image.tag
          value: ${{ needs.setup.outputs.version }}
          branch: main
          message: "Update Image Version to ${{ needs.setup.outputs.version }}"

  # ArgoCD Sync
  gitops-sync:
    runs-on: ubuntu-latest
    container:
      image: quay.io/argoproj/argocd:v2.12.4
      env:
        ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
        ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
    # run after all of needs are complete (whether skipped or success)
    if: ${{ !cancelled() && !failure() }}
    needs:
      - setup
      - gitops-commit
    steps:
      - name: Sync ArgoCD
        run: |
          argocd app sync demo-opsta-line-bot-${{ needs.setup.outputs.deploy_env }}/opsta-line-bot-${{ needs.setup.outputs.deploy_env }} --project demo
          argocd app wait demo-opsta-line-bot-${{ needs.setup.outputs.deploy_env }}/opsta-line-bot-${{ needs.setup.outputs.deploy_env }} --health
